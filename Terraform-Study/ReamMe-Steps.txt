Here is the **corrected Terraform configuration** with **detailed comments** explaining each part:  

---

## **📂 Terraform Project Structure**
```
My-Terraform-Project/
│── main.tf          # Defines EC2 instance and security group
│── variables.tf     # Defines input variables (AWS region, AMI, etc.)
│── outputs.tf       # Defines output values (EC2 public IP)
│── terraform.tfstate # Stores current infrastructure state (auto-generated)
```

---

## **🚀 `main.tf` (Terraform Configuration File)**
```hcl
# -----------------------------------------------------
# Terraform Configuration for AWS EC2 Instance & Security Group
# This script provisions an EC2 instance and a security group
# Security Group allows SSH (22) and HTTP (80) access
# Nginx is installed on instance startup
# -----------------------------------------------------

# Specify Terraform version and required providers
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"  # Ensures Terraform uses AWS provider v5.x
    }
  }
}

# Define the AWS Provider
provider "aws" {
  region = var.aws_region  # AWS region is set using a variable
}

# -----------------------------
# 🔹 Security Group Definition
# -----------------------------
resource "aws_security_group" "web_sg" {
  name        = "web-server-sg"
  description = "Allow SSH and HTTP traffic"

  # 🔹 Allow SSH (Port 22) from anywhere (for testing)
  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # ⚠️ Open to all, restrict for production
  }

  # 🔹 Allow HTTP (Port 80) for Web Traffic
  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow HTTP traffic from any IP
  }

  # 🔹 Allow all outbound traffic (needed for package installation)
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]  # Allow outgoing traffic to any IP
  }

  tags = {
    Name = "Web-Server-Security-Group"
  }
}

# -----------------------------
# 🔹 EC2 Instance Definition
# -----------------------------
resource "aws_instance" "web_server" {
  ami           = var.ami_id         # AMI ID (Amazon Machine Image) from variables.tf
  instance_type = var.instance_type  # Instance type from variables.tf
  key_name      = var.key_pair       # SSH Key Pair Name

  # Attach Security Group to EC2
  vpc_security_group_ids = [aws_security_group.web_sg.id]

  # 🔹 User Data - Install Nginx on Startup
  # This script runs when the instance boots
  user_data = <<-EOF
              #!/bin/bash
              sudo yum update -y
              sudo yum install -y nginx
              sudo systemctl start nginx
              sudo systemctl enable nginx
              EOF

  # Assign a Name tag to the instance
  tags = {
    Name = "Terraform-Web-Server"
  }
}
```

---

## **🚀 `variables.tf` (Defines Configurable Variables)**
```hcl
# -----------------------------------------------
# 🔹 Terraform Variables (Customizable Settings)
# -----------------------------------------------

# 🔹 Define AWS region (Default: us-east-1)
variable "aws_region" {
  description = "AWS region where resources will be created"
  default     = "us-east-1"
}

# 🔹 Define AMI ID (Amazon Linux 2 AMI)
variable "ami_id" {
  description = "AMI ID for EC2 instance"
  default     = "ami-0c55b159cbfafe1f0"  # Replace with a valid AMI ID
}

# 🔹 Define Instance Type
variable "instance_type" {
  description = "EC2 instance type"
  default     = "t2.micro"  # Free-tier eligible
}

# 🔹 Define Key Pair Name for SSH Access
variable "key_pair" {
  description = "AWS Key Pair Name for SSH access"
  default     = "your-key-name"  # Replace with actual AWS key pair name
}
```

---

## **🚀 `outputs.tf` (Displays EC2 Public IP After Deployment)**
```hcl
# ----------------------------------------------
# 🔹 Terraform Output (Displays EC2 Public IP)
# ----------------------------------------------
output "ec2_public_ip" {
  description = "Public IP of the EC2 instance"
  value       = aws_instance.web_server.public_ip
}
```

---

## **🚀 Steps to Deploy the EC2 Instance with Terraform**
### **1️⃣ Initialize Terraform**
```bash
terraform init
```
✅ **Downloads the AWS provider and sets up Terraform.**  

---

### **2️⃣ Preview Infrastructure Changes**
```bash
terraform plan
```
✅ **Shows what Terraform will create before applying changes.**  

---

### **3️⃣ Deploy EC2 Instance**
```bash
terraform apply
```
📌 **Terraform will ask for confirmation** → Type **`yes`** and press **Enter**.  
✅ **Terraform provisions the EC2 instance and security group.**  

---

### **4️⃣ Get the EC2 Public IP**
```bash
terraform output
```
✅ **Displays the public IP of the EC2 instance.**  

Now, **open this IP in a web browser** to check if Nginx is running:
```
http://<your-ec2-public-ip>
```
🎉 **If everything is correct, you should see the Nginx welcome page!** 🚀

---

### **5️⃣ Destroy Infrastructure (Cleanup)**
If you no longer need the EC2 instance, **destroy it to avoid AWS charges**:
```bash
terraform destroy
```
📌 **Terraform will ask for confirmation** → Type **`yes`** and press **Enter**.  
✅ **Terraform deletes all resources.**  

---

## **📌 Summary of Terraform Commands**
| Command | Description |
|---------|------------|
| `terraform init` | Initialize Terraform and download required providers |
| `terraform plan` | Preview the infrastructure before applying |
| `terraform apply` | Create the EC2 instance and security group |
| `terraform output` | Show the public IP of the EC2 instance |
| `terraform destroy` | Delete all resources created by Terraform |

---

## **🚀 Next Steps**
✅ **Modify the security group** to allow HTTPS (`port 443`).  
✅ **Use a `terraform.tfvars` file** for environment-specific variables.  
✅ **Push this Terraform project to GitHub for version control.**  

💡 **Now try deploying this Terraform configuration and let me know if you need help!** 🚀😊